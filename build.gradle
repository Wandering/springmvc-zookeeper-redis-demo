buildscript {
    repositories {
        mavenLocal()
        maven { url 'http://repository.jboss.com/maven2/' }
        mavenCentral()
        jcenter()
        maven { url "http://repo.spring.io/plugins-release" }
        maven { url "http://repo.spring.io/milestone" }
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.0.1"
        classpath "net.ltgt.gradle:gradle-apt-plugin:0.6"
        classpath "org.springframework.build.gradle:propdeps-plugin:0.0.7"
        classpath "se.transmode.gradle:gradle-docker:1.2"
        classpath "io.spring.gradle:dependency-management-plugin:0.5.6.RELEASE"
        classpath 'org.gradle.api.plugins:gradle-nexus-plugin:0.4'
    }
}

apply plugin: 'java'
sourceCompatibility=1.8
targetCompatibility=1.8
apply plugin: 'maven'
apply plugin: 'propdeps'
apply plugin: 'io.spring.dependency-management'


test {
    include '**/*UnitTest*'
    include '**/*IntTest*'

    ignoreFailures true
    reports.html.enabled = false
}



task testReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/tests")
    reportOn test
}

repositories {
    mavenCentral()
}


/** 此闭包内的声明子类皆可使用 */
allprojects {
    group 'spring-zk-redis-demo'
    version '0.0.1-SNAPSHOT'


    apply plugin: 'java'
    sourceCompatibility=1.8
    targetCompatibility=1.8
    apply plugin: 'maven'
    apply plugin: 'propdeps'
    apply plugin: 'io.spring.dependency-management'

    apply plugin: 'idea'
    apply plugin: 'eclipse'

    repositories {
        mavenLocal()
        maven { url 'http://repository.jboss.com/maven2/' }
        mavenCentral()
        jcenter()
        maven { url 'http://repo.spring.io/milestone' }
        maven { url 'http://repo.spring.io/snapshot' }
        maven { url 'https://repository.jboss.org/nexus/content/repositories/releases' }
        maven { url 'https://oss.sonatype.org/content/repositories/releases' }
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
        maven { url 'http://repo.maven.apache.org/maven2' }
    }
}

task createREADME() {
    file("README.md").createNewFile()
}



subprojects {
    task "createJavaProject" << {
        sourceSets*.java.srcDirs*.each { it.mkdirs() }
        sourceSets*.resources.srcDirs*.each { it.mkdirs() }

        /** 可选生成子文件夹 */
        file("src/main/filters").mkdirs()
        file("src/main/assembly").mkdirs()
        file("src/main/config").mkdirs()
        file("src/main/scripts").mkdirs()

        /** 填充文件，便于git提交 */
        file("src/main/java/cn/bwl").mkdirs()
        file("src/main/java/cn/bwl/package-info.java").createNewFile()
        file("src/main/resources").mkdirs()
        file("src/main/resources/spring.xml").createNewFile()

        file("src/test/java/cn/bwl").mkdirs()
        file("src/test/java/cn/bwl/package-info.java").createNewFile()
        file("src/test/resources/spring.xml").createNewFile()
    }

    /** 有时候会报错，但需要执行 */
//    task createREADME(){
//        file("README.md").createNewFile()
//    }

    configurations {
        provided
        compile.extendsFrom provided

        all*.exclude group: 'org.springframework', module: 'spring'
        all*.exclude group: 'asm', module: 'asm'
        all*.exclude group: 'log4j', module: 'log4j'
        all*.exclude group: 'org.slf4j', module: 'slf4j-log4j12'
    }
}

configure(subprojects.findAll { it.name.contains('war') }) {
    apply plugin: 'war'

    task createWebProject(dependsOn: 'createJavaProject') << {
        def webAppDir = file("$webAppDirName")
        webAppDir.mkdirs()
    }
}

